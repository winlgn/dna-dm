/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package datamining.layout;

import datamining.attributeselection.IAttributeSelection;
import datamining.classify.Classify;
import datamining.core.Attribute;
import datamining.core.Instances;
import datamining.util.ArffFileReader;
import datamining.util.PropertiesUtil;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lenovo
 */
public class ClassifyFrame extends javax.swing.JFrame {

    private Instances dataSet;
    private List<String> info = new ArrayList<>();
    private Vector<String> listItems = new Vector<>();
    private Properties classifierProperties;
    private String tmpClassifierName;
    private Classify classifier;
    private Map<String, Properties> propertiesMap = new HashMap<>();
    private ProgressDialog dialog;

    /**
     * Creates new form ClassifyFrame
     */
    public ClassifyFrame(Instances dataSet) {
        this.dataSet = dataSet;
        initComponents();
        tmpClassifierName = (String) classifierCombox.getSelectedItem();
        classifier = PropertiesUtil.getClassifier(tmpClassifierName);
        classifierSettingButton.setEnabled(classifier.hasProperties());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        saveToFileMenuItem = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        clearAllMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        classifierCombox = new javax.swing.JComboBox();
        classifierSettingButton = new javax.swing.JButton();
        useAttributeSelectionCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        foldSpinner = new javax.swing.JSpinner();
        timeSpinner = new javax.swing.JSpinner();
        runButton1 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        saveToFileMenuItem.setText("保存到文件...");
        saveToFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(saveToFileMenuItem);

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setDialogTitle("保存到文件...");
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("TEXT File (*.txt)", "txt"));

        jFileChooser2.setDialogTitle("选择分类文件");
        jFileChooser2.setFileFilter(new FileNameExtensionFilter("ARFF File (*.arff)", "arff"));

        clearAllMenuItem.setText("清空");
        clearAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu2.add(clearAllMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("分类器");

        jLabel1.setText("选择分类器：");

        classifierCombox.setModel(new javax.swing.DefaultComboBoxModel(PropertiesUtil.getPropItems(PropertiesUtil.CLASSIFIER)));
        classifierCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifierComboxActionPerformed(evt);
            }
        });

        classifierSettingButton.setText("设置");
        classifierSettingButton.setEnabled(false);
        classifierSettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifierSettingButtonActionPerformed(evt);
            }
        });

        useAttributeSelectionCheckBox.setSelected(true);
        useAttributeSelectionCheckBox.setText("使用特征选择");
        useAttributeSelectionCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                useAttributeSelectionCheckBoxItemStateChanged(evt);
            }
        });

        jLabel2.setText("选择特征选择方法：");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(PropertiesUtil.getPropItems(PropertiesUtil.ATTIBUTE_SELECTION)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("交叉次数：");

        jLabel4.setText("匹配次数：");

        runButton.setText("运行");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        foldSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(2), null, Integer.valueOf(1)));
        foldSpinner.setMinimumSize(new java.awt.Dimension(30, 22));

        timeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(1), null, Integer.valueOf(1)));

        runButton1.setText("分类...");
        runButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foldSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classifierCombox, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(classifierSettingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(useAttributeSelectionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(runButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(classifierCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classifierSettingButton)
                    .addComponent(useAttributeSelectionCheckBox)
                    .addComponent(runButton)
                    .addComponent(runButton1))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(foldSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOneTouchExpandable(true);

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setComponentPopupMenu(jPopupMenu2);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane3);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane4.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-678)/2, (screenSize.height-501)/2, 678, 501);
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        dialog = new ProgressDialog(this, false);
        dialog.setPoint("数据处理中...");
        dialog.setVisible(true);
        new Thread(new Runnable() {

            @Override
            public void run() {
                String classifierName = (String) classifierCombox.getSelectedItem();
                String selectorName = (String) jComboBox2.getSelectedItem();
                boolean useSelector = useAttributeSelectionCheckBox.isSelected();
                int times = (int) timeSpinner.getValue();
                int folds = (int) foldSpinner.getValue();
                double result = -1.0;
                if (!classifierName.equals(tmpClassifierName)) {
                    tmpClassifierName = (String) classifierCombox.getSelectedItem();
                    classifier = PropertiesUtil.getClassifier(tmpClassifierName);
                }
                if (classifier.hasProperties()) {
                    if (propertiesMap.get(tmpClassifierName) == null) {
                        classifierProperties = classifier.getprProperties();
                        propertiesMap.put(tmpClassifierName, classifierProperties);
                    } else {
                        classifierProperties = propertiesMap.get(tmpClassifierName);
                    }
                    classifier.setProperties(classifierProperties);
                }

                try {
                    if (useSelector) {
                        IAttributeSelection selector = PropertiesUtil.getAttributeSelection(selectorName);
                        result = classifier.crossTest(dataSet, folds, times, selector);
                    } else {
                        result = classifier.crossTest(dataSet, folds, times);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ClassifyFrame.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                if (result >= 0) {
                    Date date = new Date();
                    String listString;
                    String resultString;

                    if (useSelector) {
                        listString = outputListItems(classifierName, selectorName, date);
                        resultString = output(dataSet, classifierName, selectorName, times, folds, result, date);
                    } else {
                        listString = outputListItems(classifierName, date);
                        resultString = output(dataSet, classifierName, times, folds, result, date);

                    }
                    listItems.add(listString);
                    info.add(resultString);
                    jList1.setListData(listItems);
                    jList1.setSelectedIndex(listItems.size() - 1);
                    jTextArea1.setText(resultString);
                }
                dialog.dispose();
            }
        }).start();
        Date date = new Date();
        System.out.println(date.getHours()+":"+date.getMinutes()+":"+date.getSeconds());
    }//GEN-LAST:event_runButtonActionPerformed

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
        // TODO add your handling code here:
        int index = jList1.getSelectedIndex();
        if (index >= 0) {
            jTextArea1.setText(info.get(index));
        }
    }//GEN-LAST:event_jList1KeyReleased

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        int index = jList1.getSelectedIndex();
        if (index >= 0) {
            jTextArea1.setText(info.get(index));
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void useAttributeSelectionCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_useAttributeSelectionCheckBoxItemStateChanged
        jLabel2.setEnabled(useAttributeSelectionCheckBox.isSelected());
        jComboBox2.setEnabled(useAttributeSelectionCheckBox.isSelected());
    }//GEN-LAST:event_useAttributeSelectionCheckBoxItemStateChanged

    private void classifierComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifierComboxActionPerformed
        if (!((String) classifierCombox.getSelectedItem()).equals(tmpClassifierName)) {
            tmpClassifierName = (String) classifierCombox.getSelectedItem();
            classifier = PropertiesUtil.getClassifier(tmpClassifierName);
            classifierSettingButton.setEnabled(classifier.hasProperties());
//            if ("RuleClassify(DNA)".equals(tmpClassifierName) || "TreeClassify(DNA)".equals(tmpClassifierName)) {
//                useAttributeSelectionCheckBox.setEnabled(false);
//                useAttributeSelectionCheckBox.setSelected(false);
//                useAttributeSelectionCheckBoxItemStateChanged(null);
//            } else {
//                useAttributeSelectionCheckBox.setEnabled(true);
//                useAttributeSelectionCheckBox.setSelected(true);
//                useAttributeSelectionCheckBoxItemStateChanged(null);
//            }
        }
    }//GEN-LAST:event_classifierComboxActionPerformed

    private void classifierSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifierSettingButtonActionPerformed
        if (classifier.hasProperties()) {
            if (propertiesMap.get(tmpClassifierName) == null) {
                classifierProperties = classifier.getprProperties();
                propertiesMap.put(tmpClassifierName, classifierProperties);
            } else {
                classifierProperties = propertiesMap.get(tmpClassifierName);
            }

            try {
                String dialogName = classifierProperties.getProperty("setting_dialog");
                ISettingDialog settingDialog = (ISettingDialog) Class.forName(dialogName).newInstance();
                settingDialog.setProperties(classifierProperties);
                settingDialog.setModal(true);
                settingDialog.setVisible(true);
                classifierProperties = settingDialog.getProperties();
                classifier.setProperties(classifierProperties);
                propertiesMap.put(tmpClassifierName, classifierProperties);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClassifyFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(ClassifyFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_classifierSettingButtonActionPerformed

    private void saveToFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileMenuItemActionPerformed
        String result = jTextArea1.getText();
        if (result.length() == 0) {
            return;
        }

        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = jFileChooser1.getSelectedFile();
            if (!f.getName().contains(".")) {
                f = new File(f.getAbsolutePath() + ".txt");
            }
            if (f.exists()) {
                int value = JOptionPane.showConfirmDialog(this, "该文件已经存在，是否要覆盖？", "覆盖提示", JOptionPane.YES_NO_OPTION);
                if (value != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            try (FileWriter writer = new FileWriter(f)) {
                writer.write(result.replace("\n", "\r\n"));
                writer.flush();
            } catch (IOException ex) {
                Logger.getLogger(ClassifyFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveToFileMenuItemActionPerformed

    private void runButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButton1ActionPerformed
        int returnVal = jFileChooser2.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            dialog = new ProgressDialog(this, false);
            dialog.setPoint("文件读取中...");
            dialog.setVisible(true);
            new Thread(new Runnable() {

                @Override
                public void run() {
                    File f = jFileChooser2.getSelectedFile();
                    Instances instances = new ArffFileReader(f).getDataSet();
                    dialog.setPoint("数据处理中...");
                    String classifierName = (String) classifierCombox.getSelectedItem();
                    double result = -1.0;
                    if (!classifierName.equals(tmpClassifierName)) {
                        tmpClassifierName = (String) classifierCombox.getSelectedItem();
                        classifier = PropertiesUtil.getClassifier(tmpClassifierName);
                    }
                    if (classifier.hasProperties()) {
                        if (propertiesMap.get(tmpClassifierName) == null) {
                            classifierProperties = classifier.getprProperties();
                            propertiesMap.put(tmpClassifierName, classifierProperties);
                        } else {
                            classifierProperties = propertiesMap.get(tmpClassifierName);
                        }
                        classifier.setProperties(classifierProperties);
                    }
                    result = classifier.evalScore(instances);

                    if (result >= 0) {
                        Date date = new Date();
                        String listString;
                        String resultString;
                        listString = outputListItems(classifierName, "分类:" + instances.getRelationName(), date);
                        resultString = output(instances, classifierName, result, date);
                        listItems.add(listString);
                        info.add(resultString);
                        jList1.setListData(listItems);
                        jList1.setSelectedIndex(listItems.size() - 1);
                        jTextArea1.setText(resultString);
                    }
                    dialog.dispose();
                }
            }).start();
        }
    }//GEN-LAST:event_runButton1ActionPerformed

    private void clearAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllMenuItemActionPerformed
        listItems.clear();
        info.clear();
        jList1.setListData(listItems);
    }//GEN-LAST:event_clearAllMenuItemActionPerformed

    private static String outputListItems(String classifierName, Date date) {
        StringBuilder builder = new StringBuilder();
        builder.append(classifierName);
        builder.append(" - ");
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        builder.append(format.format(date));

        return builder.toString();
    }

    private static String outputListItems(String classifierName, String selectorName, Date date) {
        StringBuilder builder = new StringBuilder();
        builder.append(classifierName);
        builder.append("(");
        builder.append(selectorName);
        builder.append(")");
        builder.append(" - ");
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        builder.append(format.format(date));

        return builder.toString();
    }

    private static String output(Instances inst, String classifierName, double result, Date date) {
        //生成时间
        StringBuilder builder = new StringBuilder("=====INFORMATION=====\n");
        builder.append("Build Time:\t");
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        builder.append(dateFormat.format(date));
        builder.append("\n");
        //Relation name
        builder.append("Relation Name:\t");
        builder.append(inst.getRelationName());
        builder.append("\n");
        //Instances size
        builder.append("Instances Size:\t");
        builder.append(inst.numInstances());
        builder.append("\n");
        //Attributes size
        builder.append("Attribute Size:\t");
        builder.append(inst.numAttributes());
        builder.append("\n");
        //Attributes list
        List<Attribute> list = inst.getAttributes();
        Iterator<Attribute> iter = list.iterator();
        while (iter.hasNext()) {
            Attribute attribute = iter.next();
            builder.append("\t\t");
            builder.append(attribute.getAttributeName());
            builder.append("\n");
        }
        //Classifer Information
        builder.append("Classifier:\t");
        builder.append(classifierName);
        builder.append("\n");

//        DecimalFormat format = new DecimalFormat("#.####%");
        builder.append("\n=====RESULT=====\n");
        builder.append("Classifier evalScore:\t");
        builder.append("\t");
        builder.append(result);
        builder.append("\n");


        return builder.toString();
    }

    private static String output(Instances inst, String classifierName, int times, int folds, double result, Date date) {
        //生成时间
        StringBuilder builder = new StringBuilder("=====INFORMATION=====\n");
        builder.append("Build Time:\t");
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        builder.append(dateFormat.format(date));
        builder.append("\n");
        //Relation name
        builder.append("Relation Name:\t");
        builder.append(inst.getRelationName());
        builder.append("\n");
        //Instances size
        builder.append("Instances Size:\t");
        builder.append(inst.numInstances());
        builder.append("\n");
        //Attributes size
        builder.append("Attribute Size:\t");
        builder.append(inst.numAttributes());
        builder.append("\n");
        //Attributes list
        List<Attribute> list = inst.getAttributes();
        Iterator<Attribute> iter = list.iterator();
        while (iter.hasNext()) {
            Attribute attribute = iter.next();
            builder.append("\t\t");
            builder.append(attribute.getAttributeName());
            builder.append("\n");
        }
        //Classifer Information
        builder.append("Classifier:\t");
        builder.append(classifierName);
        builder.append("\n");
        builder.append("Times:\t\t");
        builder.append(times);
        builder.append("\n");
        builder.append("Folds:\t\t");
        builder.append(folds);
        builder.append("\n");

        DecimalFormat format = new DecimalFormat("#.####%");
        builder.append("\n=====RESULT=====\n");
        builder.append("Correctly Classified:\t");
//        builder.append((int) (inst.numInstances() * result));
        builder.append("\t");
        builder.append(format.format(result));
        builder.append("\n");
        builder.append("Incorrectly Classified:\t");
//        builder.append((int) (inst.numInstances() * (1 - result)));
        builder.append("\t");
        builder.append(format.format(1 - result));
        builder.append("\n");

        return builder.toString();
    }

    private static String output(Instances inst, String classifierName, String selectorName, int times, int folds, double result, Date date) {
        //生成时间
        StringBuilder builder = new StringBuilder("=====INFORMATION=====\n");
        builder.append("Build Time:\t");
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        builder.append(dateFormat.format(date));
        builder.append("\n");
        //Relation name
        builder.append("Relation Name:\t");
        builder.append(inst.getRelationName());
        builder.append("\n");
        //Instances size
        builder.append("Instances Size:\t");
        builder.append(inst.numInstances());
        builder.append("\n");
        //Attributes size
        builder.append("Attribute Size:\t");
        builder.append(inst.numAttributes());
        builder.append("\n");
        //Attributes list
        List<Attribute> list = inst.getAttributes();
        Iterator<Attribute> iter = list.iterator();
        while (iter.hasNext()) {
            Attribute attribute = iter.next();
            builder.append("\t\t");
            builder.append(attribute.getAttributeName());
            builder.append("\n");
        }
        //Classifer Information
        builder.append("Classifier:\t");
        builder.append(classifierName);
        builder.append("\n");
        builder.append("Times:\t\t");
        builder.append(times);
        builder.append("\n");
        builder.append("Folds:\t\t");
        builder.append(folds);
        builder.append("\n");
        //Selector Name
        builder.append("Attribute Selection:\t");
        builder.append(selectorName);
        builder.append("\n");


        DecimalFormat format = new DecimalFormat("#.####%");
        builder.append("\n=====RESULT=====\n");
        builder.append("Correctly Classified\t");
//        builder.append((int) (inst.numInstances() * result));
        builder.append("\t");
        builder.append(format.format(result));
        builder.append("\n");
        builder.append("Incorrectly Classified:\t");
//        builder.append((int) (inst.numInstances() * (1 - result)));
        builder.append("\t");
        builder.append(format.format(1 - result));
        builder.append("\n");

        return builder.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {

            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassifyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                ArffFileReader reader = new ArffFileReader("D:" + File.separator + "colon.arff");
                new ClassifyFrame(reader.getDataSet()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox classifierCombox;
    private javax.swing.JButton classifierSettingButton;
    private javax.swing.JMenuItem clearAllMenuItem;
    private javax.swing.JSpinner foldSpinner;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton runButton;
    private javax.swing.JButton runButton1;
    private javax.swing.JMenuItem saveToFileMenuItem;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JCheckBox useAttributeSelectionCheckBox;
    // End of variables declaration//GEN-END:variables
}
